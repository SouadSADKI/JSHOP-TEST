name: Juice Shop CI/CD with DevSecOps

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - main

jobs:
  # SAST using CodeQL
  codeql-sast:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'javascript'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Upload SAST Report to DefectDojo
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
        run: |
          curl -X POST "${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "accept: application/json" \
          -F "scan_type=CodeQL" \
          -F "file=@results.sarif" \
          -F "engagement=1"  # Replace with your actual engagement ID

  # SCA using OWASP Dependency-Check
  sca-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run OWASP Dependency-Check
        uses: dependency-check/action@v4.2.0  # Corrected and latest version of Dependency-Check
        with:
          format: 'ALL'
          project: 'Juice-Shop'
          outdir: 'dependency-check-report'

      - name: Upload Dependency-Check Report to DefectDojo
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
        run: |
          curl -X POST "${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "accept: application/json" \
          -F "scan_type=Dependency Check Scan" \
          -F "file=@dependency-check-report/dependency-check-report.xml" \
          -F "engagement=1"  # Replace with your actual engagement ID

  # Container Image Security Scanning
  container-image-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Pull Juice Shop image from Docker Hub
        run: docker pull bkimminich/juice-shop:latest

      - name: Run Trivy Scan on Docker Image
        uses: aquasecurity/trivy-action@main  # Use "main" to always get the latest
        with:
          image-ref: 'bkimminich/juice-shop:latest'
          format: 'json'
          output: 'trivy-report.json'

      - name: Upload Trivy Scan Report to DefectDojo
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
        run: |
          curl -X POST "${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "accept: application/json" \
          -F "scan_type=Container Scan" \
          -F "file=@trivy-report.json" \
          -F "engagement=1"  # Replace with your actual engagement ID

  # DAST Scan with ZAP on Heroku Instance
  zap_scan:
    runs-on: ubuntu-latest
    name: Scan Juice Shop preview instance on Heroku
    steps:
      - name: Check out Git repository
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # Fixed commit ref for v4.0.0
        with:
          ref: develop
      - name: ZAP Scan
        uses: zaproxy/action-baseline@41aee98ebc7cf2802c3beae4e7d4336413a21e43 # Fixed commit ref for v0.9.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'https://preview.owasp-juice.shop'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j'

  # Deploy Juice Shop from Docker Hub (optional, to verify the CI/CD pipeline)
  deploy:
    runs-on: ubuntu-latest
    needs: [codeql-sast, sca-scan, container-image-scan, zap_scan]
    steps:
      - name: Deploy Juice Shop
        run: docker run --rm -d -p 3000:3000 bkimminich/juice-shop:latest
