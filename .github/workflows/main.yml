name: Juice Shop CI/CD with DevSecOps

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # SAST using CodeQL
  codeql-sast:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'javascript'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Upload SAST Report to DefectDojo
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
        run: |
          curl -X POST "${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "accept: application/json" \
          -F "scan_type=CodeQL" \
          -F "file=@results.sarif" \
          -F "engagement=1"  # Replace with your actual engagement ID

  # SCA using OWASP Dependency-Check and Snyk
  sca-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run OWASP Dependency-Check
        uses: stono/owasp-dependency-check-action@v3
        with:
          format: 'ALL'
          project: 'Juice-Shop'
          outdir: 'dependency-check-report'

      - name: Upload Dependency-Check Report to DefectDojo
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
        run: |
          curl -X POST "${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "accept: application/json" \
          -F "scan_type=Dependency Check Scan" \
          -F "file=@dependency-check-report/dependency-check-report.xml" \
          -F "engagement=1"  # Replace with your actual engagement ID

      - name: Run Snyk SCA
        uses: snyk/actions@v3
        with:
          args: test --all-projects --file=package.json --sarif-file-output=snyk-results.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Snyk SCA Report to DefectDojo
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
        run: |
          curl -X POST "${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "accept: application/json" \
          -F "scan_type=Snyk Scan" \
          -F "file=@snyk-results.sarif" \
          -F "engagement=1"  # Replace with your actual engagement ID

  # Container Image Security Scanning
  container-image-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Pull Juice Shop image from Docker Hub
        run: docker pull bkimminich/juice-shop:latest

      - name: Run Trivy Scan on Docker Image
        uses: aquasecurity/trivy-action@v0.7.0
        with:
          image-ref: 'bkimminich/juice-shop:latest'
          format: 'json'
          output: 'trivy-report.json'

      - name: Upload Trivy Scan Report to DefectDojo
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
        run: |
          curl -X POST "${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "accept: application/json" \
          -F "scan_type=Container Scan" \
          -F "file=@trivy-report.json" \
          -F "engagement=1"  # Replace with your actual engagement ID

  # DAST Scan with OWASP ZAP
  dast-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Set up ZAP
        run: |
          docker pull owasp/zap2docker-stable
          docker run -d -u zap -p 8080:8080 owasp/zap2docker-stable zap.sh -daemon -port 8080

      - name: Run ZAP Scan
        env:
          TARGET_URL: "http://localhost:3000"  # Replace with your appâ€™s URL
        run: |
          docker exec zap zap-cli quick-scan --self-contained --start-options '-config api.addrs.addr.name=.* -config api.addrs.addr.regex=true' $TARGET_URL
          docker exec zap zap-cli report -o zap-report.xml -f xml

      - name: Upload ZAP Report to DefectDojo
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
        run: |
          curl -X POST "${{ secrets.DEFECTDOJO_URL }}/api/v2/import-scan/" \
          -H "Authorization: Token $DEFECTDOJO_API_KEY" \
          -H "accept: application/json" \
          -F "scan_type=ZAP Scan" \
          -F "file=@zap-report.xml" \
          -F "engagement=1"  # Replace with your actual engagement ID

  # Deploy Juice Shop from Docker Hub (optional, to verify the CI/CD pipeline)
  deploy:
    runs-on: ubuntu-latest
    needs: [codeql-sast, sca-scan, container-image-scan, dast-scan]
    steps:
      - name: Deploy Juice Shop
        run: docker run --rm -d -p 3000:3000 bkimminich/juice-shop:latest
