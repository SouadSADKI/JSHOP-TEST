name: CodeQL SAST and OWASP Dependency-Check SCA with DefectDojo

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # CodeQL SAST job for static code analysis
  codeql-sast:
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'javascript'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Upload CodeQL Report to DefectDojo
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          ENGAGEMENT_ID: ${{ secrets.ENGAGEMENT_ID }}
        run: |
          if [ -f "results.sarif" ]; then
            curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
              -H "Authorization: Token $DEFECTDOJO_API_KEY" \
              -H "accept: application/json" \
              -F "scan_type=CodeQL" \
              -F "file=@results.sarif" \
              -F "engagement=$ENGAGEMENT_ID" \
              -F "auto_create_context=true" \
              -F "active=true" \
              -F "verified=false"
          else
            echo "CodeQL SARIF report not found."
          fi

  # OWASP Dependency-Check SCA job for dependency analysis
  dependency-check-sca:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download and Install OWASP Dependency-Check
        run: |
          # Define the version to use for Dependency-Check
          DEP_CHECK_VERSION="7.0.5"
          
          # Download Dependency-Check
          echo "Downloading Dependency-Check version $DEP_CHECK_VERSION..."
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v$DEP_CHECK_VERSION/dependency-check-$DEP_CHECK_VERSION-release.zip

          # Verify download
          if [ -f "dependency-check-$DEP_CHECK_VERSION-release.zip" ]; then
            echo "Dependency-Check downloaded successfully."
          else
            echo "Failed to download Dependency-Check."
            exit 1
          fi

          # Extract Dependency-Check
          unzip "dependency-check-$DEP_CHECK_VERSION-release.zip" -d dependency-check

          # Verify extraction
          if [ -f "./dependency-check/bin/dependency-check.sh" ]; then
            echo "Dependency-Check installed successfully."
          else
            echo "Failed to extract Dependency-Check."
            exit 1
          fi

      - name: Run OWASP Dependency-Check
        run: |
          # Run dependency-check.sh directly from its installation path
          ./dependency-check/bin/dependency-check.sh --project "Juice-Shop" \
                                                     --out dependency-check-report \
                                                     --scan $(pwd) \
                                                     --format "ALL"

      - name: Upload Dependency-Check Report as Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Dependency-Check-Report
          path: dependency-check-report/      # Upload all report files from the output directory

      - name: Upload Dependency-Check Report to DefectDojo
        env:
          DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
          DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
          ENGAGEMENT_ID: ${{ secrets.ENGAGEMENT_ID }}
        run: |
          if [ -f "dependency-check-report/dependency-check-report.xml" ]; then
            curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
              -H "Authorization: Token $DEFECTDOJO_API_KEY" \
              -H "accept: application/json" \
              -F "scan_type=Dependency Check Scan" \
              -F "file=@dependency-check-report/dependency-check-report.xml" \
              -F "engagement=$ENGAGEMENT_ID" \
              -F "auto_create_context=true" \
              -F "active=true" \
              -F "verified=false"
          else
            echo "Dependency-Check XML report not found."
          fi
